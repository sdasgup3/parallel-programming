mainmodule oddEven {
  readonly int numelements;
  readonly CProxy_Main mainproxy;
  readonly CProxy_Worker workerarray;
  message myMsg;

  mainchare Main {
    entry Main(CkArgMsg*);
    entry void done(CkReductionMsg* );

  };

  array [1D] Worker {
    entry Worker();
    entry void sendToRight(int, int);
    entry void responseFromRight(int, int);

    entry [threaded] void run() {
      for ( i = 0 ; i < numelements; i++) {
        
        if(thisIndex % 2 == 0 && thisIndex != numelements -1 ) {
          serial {
            workerarray[thisIndex + 1].sendToRight(thisIndex,val);
          }
          when responseFromRight[thisIndex + 1](int iter, int rightVal) serial {
            val = rightVal;
          }
        } 
        if(thisIndex % 2 == 1) {
          when sendToRight[thisIndex-1](int iter, int leftVal) serial {
            if(leftVal > val) {
              workerarray[thisIndex-1].responseFromRight(thisIndex,val);
              val = leftVal;
            } else {
              workerarray[thisIndex-1].responseFromRight(thisIndex, leftVal);
            }
          }
        }
        serial {
          //CkPrintf("[%d] iter: %d : First\n", thisIndex, i);
          barrier();
        }
        if (thisIndex % 2 == 1 && thisIndex != numelements -1 ) {
          serial {
            workerarray[thisIndex + 1].sendToRight(thisIndex, val);
          }
          when responseFromRight[thisIndex+1](int iter, int rightVal) serial {
            val = rightVal;
          }
        }
        if (thisIndex != 0 && thisIndex % 2 == 0 ) {
          when sendToRight[thisIndex -1 ] (int iter , int leftVal) serial {
            if(leftVal > val) {
              workerarray[thisIndex-1].responseFromRight(thisIndex, val);
              val = leftVal;
            } else {
              workerarray[thisIndex-1].responseFromRight(thisIndex, leftVal);
            }
          }
        }
        serial {
          //CkPrintf("[%d] iter: %d : Second\n", thisIndex, i);
          barrier();
        }
      }

      serial {
        contribute(CkCallback(CkIndex_Main::done(NULL), mainproxy)); 
      }

    };
    entry void dump();
    entry [reductiontarget] void barrierH();
  };

};
